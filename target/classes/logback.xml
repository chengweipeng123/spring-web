<?xml version="1.0" encoding="UTF-8"?>

        <!--当系统发现在 classpath 里有 Logback 的 jar 包，就会自动的在 classpath 下查找 logback.xml 文件，-->
        <!--如果找到就使用它来配置 Logback，如果没找到就使用默认的 Logback 配置。-->
        <!--（resources 目录里的文件会被自动的复制到 classes 目录，即 classpath 环境下）-->


<configuration>
    <property name="log.base" value="logs"/>

    <!--输出-->

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}] [%-5level] [%F-%M:%L] - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/log.txt</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.base}/log.%d{yyyyMMdd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}] [%-5level] [%F-%M:%L] - %msg%n</pattern>
        </encoder>
    </appender>

    <root>
        <appender-ref ref="STDOUT" />
        <appender-ref ref="file" />
    </root>

    <logger name="org.mybatis" level="off"/>
    <logger name="org.springframework" level="debug"/>

    <!--过滤器-->
    <!--Logback 还支持过滤器，例如将过滤器的日志级别配置为 ERROR，所有 ERROR 级别的日志交给 appender 处理，-->
    <!--非 ERROR 级别的日志，被过滤掉。过滤器被添加到 appender 中，为 appender 添加一个或多个过滤器后，-->
    <!--可以用任意条件对日志进行过滤。-->
    <!--appender 有多个过滤器时，按照配置顺序执行。通过 appender 中的 filter 来严格限制日志的输出级别：-->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <level>ERROR</level>
        <onMatch>ACCEPT</onMatch>
        <onMismatch>DENY</onMismatch>
    </filter>

    <!--精确控制日志的应用范围-->
    <logger name="org" level="ERROR" />
</configuration>